{"version":3,"file":"static/webpack/static/development/pages/chat/messenger.js.2a7fa162e846cc39ba6c.hot-update.js","sources":["webpack:///./components/chat/bidingcard.js","webpack:///./pages/chat/messenger.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { Card, Placeholder, Image } from \"semantic-ui-react\";\nimport firebase from \"../../firebase\";\nclass BidCard extends Component {\n  state = {\n    image: \"\",\n    message: this.props.message\n  };\n\n  componentDidMount() {\n    firebase\n      .storage()\n      .ref(this.props.message.url)\n      .getDownloadURL()\n      .then(url => {\n        this.setState({ image: url });\n      });\n  }\n\n  render() {\n    return (\n      <Card style={{ margin: \"10px\", float: \"right\" }}>\n        <Card.Content\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <h2>Biding</h2>\n        </Card.Content>\n        <Card.Content>\n          {this.state.image === \"\" ? (\n            <Placeholder>\n              <Placeholder.Image rectangular />\n            </Placeholder>\n          ) : (\n            <Image src={this.state.image} />\n          )}{\" \"}\n          <Card.Header style={{ marginTop: \"10px\" }}>\n            {this.state.message.productname}\n          </Card.Header>\n          <Card.Meta style={{ display: \"inline\" }}>\n            <strike>${this.state.message.actualprice}</strike>\n          </Card.Meta>\n          <h3 style={{ display: \"inline\", marginLeft: \"10px\" }}>\n            ${this.state.message.price}\n          </h3>\n        </Card.Content>\n        <Card.Content>\n          <h3> Status : {this.state.message.status}</h3>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\nexport default BidCard;\n","import React, { Component } from \"react\";\nimport Layout from \"../../components/layout\";\nimport BidCard from \"../../components/chat/bidingcard\";\nimport {\n  TextArea,\n  Button,\n  Icon,\n  Divider,\n  Header,\n  List,\n  Label,\n  Modal,\n  Form,\n  Dropdown,\n  Input\n} from \"semantic-ui-react\";\nimport firebase from \"../../firebase\";\nclass Messenger extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      loading: false,\n      customername: \"\",\n      message: \"\",\n      modal: false,\n      product: \"\",\n      storename: \"\",\n      products: [],\n      price: \"\",\n      actualprice: \"\",\n      quantity: 0,\n      productid: 0,\n      tag: \"\",\n      url: \"\"\n    };\n  }\n\n  static getInitialProps(props) {\n    const id = props.query.id;\n\n    return { id: id };\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  componentDidMount() {\n    const userid = localStorage.getItem(\"userid\");\n\n    firebase\n      .firestore()\n      .collection(`users/${userid}/chat`)\n      .doc(this.props.id)\n      .onSnapshot(this.onMessageUpdate);\n\n    firebase\n      .firestore()\n      .collection(\"stores\")\n      .doc(this.props.id)\n      .get()\n      .then(doc => {\n        const { products } = doc.data();\n        let temp = [],\n          key = 0;\n        products.forEach(product => {\n          temp.push({\n            key: key,\n            value: product.productname,\n            text: product.productname,\n            price: product.price,\n            url: product.url,\n            tag: product.tag,\n            productid: product.productid\n          });\n          key++;\n        });\n\n        this.setState({ products: temp });\n      });\n\n    this.scrollToBottom();\n  }\n\n  onMessageUpdate = querySnapshot => {\n    try {\n      const { messages, customername, storename } = querySnapshot.data();\n\n      this.setState({\n        messages,\n        storename,\n        customername\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  handleProductSelect = (e, { value }) => {\n    const { text, price, tag, productid, url } = this.state.products.find(\n      product => {\n        return product.value == value;\n      }\n    );\n\n    this.setState({\n      product: text,\n      actualprice: price,\n      price: \"\",\n      quantity: 1,\n      tag,\n      productid,\n      url\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ modal: false });\n  };\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSend = () => {\n    this.setState({ loading: true });\n    const user = localStorage.getItem(\"userid\");\n    firebase\n      .firestore()\n      .collection(`users/${user}/chat`)\n      .doc(this.props.id)\n      .get()\n      .then(doc => {\n        let { messages } = doc.data();\n        if (messages === undefined) {\n          messages = [];\n          messages.push({ from: \"me\", message: this.state.message });\n        } else {\n          messages.push({\n            from: \"me\",\n            message: this.state.message\n          });\n        }\n        firebase\n          .firestore()\n          .collection(`users/${user}/chat`)\n          .doc(this.props.id)\n          .set(\n            {\n              messages\n            },\n            { merge: true }\n          );\n      })\n      .then(() => {\n        this.setState({ loading: false, message: \"\" });\n      });\n  };\n\n  handleBid = () => {\n    this.setState({ modal: true });\n  };\n\n  submitBid = () => {\n    this.setState({ loading: true });\n    const user = localStorage.getItem(\"userid\");\n    firebase\n      .firestore()\n      .collection(`users`)\n      .doc(user)\n      .get()\n      .then(doc => {\n        const { address } = doc.data();\n        firebase\n          .firestore()\n          .collection(`users/${user}/chat`)\n          .doc(this.props.id)\n          .get()\n          .then(doc => {\n            let { messages } = doc.data();\n            if (messages === undefined) {\n              messages = [];\n              messages.push({\n                from: \"me\",\n                message: \"bid\",\n                price: this.state.price,\n                actualprice: this.state.actualprice,\n                total:\n                  parseInt(this.state.price) * parseInt(this.state.quantity),\n                quantity: this.state.quantity,\n                productname: this.state.product,\n                url: this.state.url,\n                productid: this.state.productid,\n                tag: this.state.tag,\n                address,\n                customername: this.state.customername\n              });\n            } else {\n              messages.push({\n                from: \"me\",\n                message: \"bid\",\n                price: this.state.price,\n                productname: this.state.product,\n                actualprice: this.state.actualprice,\n                total:\n                  parseInt(this.state.price) * parseInt(this.state.quantity),\n                quantity: this.state.quantity,\n                url: this.state.url,\n                status: \"Pending\",\n                productid: this.state.productid,\n                tag: this.state.tag,\n                address,\n                customername: this.state.customername\n              });\n            }\n            firebase\n              .firestore()\n              .collection(`users/${user}/chat`)\n              .doc(this.props.id)\n              .set(\n                {\n                  messages\n                },\n                { merge: true }\n              );\n          })\n          .then(() => {\n            this.setState({ loading: false, message: \"\", modal: false });\n          });\n      });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <div\n          id=\"MyDivElement\"\n          style={{\n            height: \"79vh\",\n            overflowY: \"auto\",\n            marginLeft: \"10px\"\n          }}\n        >\n          <Divider horizontal style={{ margin: \"10px\" }}>\n            <Header as=\"h3\">\n              <Icon name=\"chat\" />\n              {this.state.storename}\n            </Header>\n          </Divider>\n          <List>\n            {this.state.messages === undefined ? (\n              <Label>Now you can chat and bid to {this.state.storename}</Label>\n            ) : (\n              this.state.messages.map((message, index) => {\n                if (message.from === \"me\") {\n                  if (message.message === \"bid\") {\n                    return (\n                      <List.Item>\n                        <BidCard message={message} style={{ float: \"right\" }} />\n                      </List.Item>\n                    );\n                  } else {\n                    return (\n                      <List.Item key={index}>\n                        <div\n                          style={{\n                            padding: \"10px\",\n                            color: \"white\",\n                            backgroundColor: \"#5CB3FF\",\n                            float: \"right\",\n                            margin: \"5px\",\n                            borderRadius: \"10px\"\n                          }}\n                        >\n                          <h5>{message.message}</h5>\n                        </div>\n                      </List.Item>\n                    );\n                  }\n                } else {\n                  return (\n                    <List.Item key={index}>\n                      <div\n                        style={{\n                          padding: \"10px\",\n                          color: \"white\",\n                          backgroundColor: \"#8D38C9\",\n                          float: \"left\",\n                          margin: \"5px\",\n                          borderRadius: \"10px\"\n                        }}\n                      >\n                        <h5>{message.message}</h5>\n                      </div>\n                    </List.Item>\n                  );\n                }\n              })\n            )}\n          </List>\n          <div\n            style={{ float: \"left\", clear: \"both\" }}\n            ref={el => {\n              this.messagesEnd = el;\n            }}\n          />\n        </div>\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n          <TextArea\n            name=\"message\"\n            placeholder=\"Enter your message\"\n            value={this.state.message}\n            onChange={this.handleOnChange}\n            style={{ width: \"90%\", marginLeft: \"5px\", height: \"10vh\" }}\n          />\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n            <Button\n              color=\"green\"\n              style={{\n                display: \"inline\",\n                height: \"30px\",\n                width: \"70px\",\n                marginLeft: \"5px\"\n              }}\n              loading={this.state.loading}\n              onClick={this.handleSend}\n            >\n              Send\n            </Button>\n            <Button\n              color=\"violet\"\n              style={{\n                width: \"70px\",\n                marginLeft: \"5px\",\n                height: \"30px\",\n                marginTop: \"5px\"\n              }}\n              onClick={this.handleBid}\n            >\n              Bid\n            </Button>\n          </div>\n        </div>\n        <Modal open={this.state.modal} onClose={this.handleClose}>\n          <Modal.Header>Bid</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <Form.Field\n                name=\"product\"\n                control={Dropdown}\n                label=\"Product name\"\n                value={this.state.product}\n                onChange={this.handleProductSelect}\n                placeholder=\"Please select product\"\n                clearable\n                selection\n                search\n                options={this.state.products}\n                required\n              />\n              <Form.Field\n                name=\"actualprice\"\n                control={Input}\n                label=\"Actual Price\"\n                value={this.state.actualprice}\n                onChange={this.handleOnChange}\n                placeholder=\"Please select product to view price\"\n                disabled\n              />\n              <Form.Field\n                name=\"price\"\n                control={Input}\n                label=\"Price\"\n                value={this.state.price}\n                onChange={this.handleOnChange}\n                placeholder=\"Enter the price to bid\"\n                required\n              />\n              <Form.Field\n                name=\"quantity\"\n                control={Input}\n                label=\"Quantity\"\n                value={this.state.quantity}\n                onChange={this.handleOnChange}\n                placeholder=\"Enter the quantity\"\n                required\n              />\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <h3 style={{ float: \"left\" }}>Biding price: ${this.state.price}</h3>\n            <Button\n              onClick={this.submitBid}\n              color=\"green\"\n              loading={this.state.loading}\n            >\n              Submit Bid\n            </Button>\n          </Modal.Actions>\n        </Modal>\n      </Layout>\n    );\n  }\n}\n\nexport default Messenger;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAWA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAlDA;AACA;AAoDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AAaA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2BA;AAAA;AAAA;AACA;AACA;AA7BA;AAwEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AApFA;AAqFA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAtGA;AAwGA;AAAA;AAAA;AACA;AACA;AA1GA;AA4GA;AAGA;AACA;AAhHA;AAkHA;AAAA;AAAA;AACA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAMA;AADA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAnJA;AAqJA;AAAA;AAAA;AACA;AACA;AAvJA;AAyJA;AAAA;AAAA;AACA;AAAA;AACA;AAKA;AAAA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AAAA;AAMA;AADA;AAGA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAFA;AAkBA;AACA;;;AAWA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AAMA;AAKA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;;;AAwJA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAcA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAcA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAcA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAcA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAWA;;;AAnXA;AACA;AAEA;AAAA;AAAA;AACA;;;;AAzBA;AACA;AA0YA;;;;A","sourceRoot":""}